{"version":3,"sources":["components/UsernameForm/index.js","components/IframeVideo/index.js","components/MessageList/index.js","components/SendMsg/index.js","components/IsTyping/index.js","components/PeopleList/index.js","pages/ChatView/index.js","App.js","serviceWorker.js","index.js"],"names":["UsernameForm","props","state","username","onSubmit","bind","onChange","e","preventDefault","this","setState","target","value","type","placeholder","Component","IframeVideo","videoUri","isLoading","term","searchYouTube","key","q","maxResults","videos","console","log","id","videoId","Typography","className","variant","component","src","title","MessageList","currentUser","messages","map","message","index","style","alignItems","senderId","backgroundColor","color","gutterBottom","text","replace","moment","createdAt","format","SendMsg","multiple","IsTyping","usersWhoAreTyping","length","slice","join","PeopleList","users","user","presenceState","name","presence","renderUsers","WhosOnlineListItem","styles","li","display","marginTop","marginBottom","paddingTop","paddingBottom","div","borderRadius","width","height","marginRight","children","ChatScreen","currentRoom","sendMessage","sendTypingEvent","isTypingIn","roomId","catch","error","Chatkit","ChatManager","instanceLocator","userId","currentUsername","tokenProvider","TokenProvider","url","connect","then","subscribeToRoom","messageLimit","hooks","onMessage","onUserStartedTyping","onUserStoppedTyping","filter","onPresenceChange","forceUpdate","onUserJoined","App","currentScreen","onUsernameSubmitted","fetch","method","headers","body","JSON","stringify","response","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+WAwCgBA,E,YArCf,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,IAEZ,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBANC,E,sEASVE,GACPA,EAAEC,iBACFC,KAAKR,MAAMG,SAASK,KAAKP,MAAMC,Y,+BAGxBI,GACNE,KAAKC,SAAS,CAAEP,SAAUI,EAAEI,OAAOC,U,+BAInC,OACE,6BACE,6BACE,sDACA,0BAAMR,SAAUK,KAAKL,UACnB,2BACES,KAAK,OACLC,YAAY,qBACZR,SAAUG,KAAKH,WAEjB,2BAAOO,KAAK,kB,GA9BGE,a,0DCoCZC,G,kBA9Bb,aAAe,IAAD,8BACZ,+CACKd,MAAQ,CACXe,SAAU,GACVC,WAAW,GAJD,E,iFAQM,IAAD,OACTC,EAASV,KAAKR,MAAdkB,KACRC,IAAc,CAACC,IAbH,0CAaiBF,KAAMA,EAAMG,EAAGH,EAAMI,WAAY,IAAI,SAACC,GAC/DC,QAAQC,IAAIF,GACZ,EAAKd,SAAS,CAAEO,SAAS,iCAAD,OAAmCO,EAAO,GAAGG,GAAGC,SAAWV,WAAW,OAElGO,QAAQC,IAAI,OAAQP,K,+BAInB,OAAIV,KAAKP,MAAMgB,UAER,kBAACW,EAAA,EAAD,CAAYC,UAAU,MAAMC,QAAQ,QAAQC,UAAU,KAAtD,oBAKC,4BAAQC,IAAKxB,KAAKP,MAAMe,SAAUiB,MAAM,uB,GA1B3BnB,c,iBCgCXoB,G,uLAhCH,IAAD,EAC2B1B,KAAKR,MAA/BmC,EADD,EACCA,YAAaC,EADd,EACcA,SACrB,OACE,yBACAP,UAAU,oBAER,4BACGO,EAASC,KAAI,SAACC,EAASC,GAAV,OACZ,yBAAKV,UAAU,SAASW,MAAO,CAAEC,WAAYN,EAAYT,KAAOY,EAAQI,SAAW,WAAW,cAAgBtB,IAAKmB,GACjH,yBAAKV,UAAU,UAAUW,MAAO,CAAEG,gBAAiBR,EAAYT,KAAOY,EAAQI,SAAW,UAAU,YACjG,kBAACd,EAAA,EAAD,CAAYC,UAAU,QAAQe,MAAM,gBAAgBC,cAAY,GAC7DN,EAAQ,IAAOD,EAAQI,WAAaN,EAASG,EAAM,GAAGG,UAAaP,EAAYT,KAAOY,EAAQI,UAAY,GAAGJ,EAAQI,UAElG,MAApBJ,EAAQQ,KAAK,GACf,kBAAC,EAAD,CAAa5B,KAAMoB,EAAQQ,KAAKC,QAAQ,IAAK,MAE7C,kBAACnB,EAAA,EAAD,CAAYC,UAAU,MAAMC,QAAQ,QAAQC,UAAU,KACnDO,EAAQQ,MAGX,kBAAClB,EAAA,EAAD,CAAYC,UAAU,UAAUC,QAAQ,QAAQC,UAAU,KACvDiB,IAAOV,EAAQW,WAAWC,OAAO,kB,GAtB1BpC,cCqCXqC,G,kBAvCd,WAAYnD,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX6C,KAAM,IAER,EAAK3C,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBANC,E,sEASTE,GACRA,EAAEC,iBACFC,KAAKR,MAAMG,SAASK,KAAKP,MAAM6C,MAC/BtC,KAAKC,SAAS,CAAEqC,KAAM,O,+BAGdxC,GACRE,KAAKC,SAAS,CAAEqC,KAAMxC,EAAEI,OAAOC,QAC3BH,KAAKR,MAAMK,UACbG,KAAKR,MAAMK,a,+BAKb,OACE,yBAAKwB,UAAU,iBACZ,0BAAM1B,SAAUK,KAAKL,UACjB,2BACIS,KAAK,OACLC,YAAY,qCACZuC,UAAU,EACV/C,SAAUG,KAAKH,SACfM,MAAOH,KAAKP,MAAM6C,a,GAhCZhC,cCkBPuC,G,uLAfX,OAAI7C,KAAKR,MAAMsD,kBAAkBC,OAAS,EAEtC,yBAAK1B,UAAU,mBACb,kBAACD,EAAA,EAAD,CAAYC,UAAU,QAAQe,MAAM,gBAAgBC,cAAY,GAAhE,UACMrC,KAAKR,MAAMsD,kBACZE,MAAM,EAAG,GACTC,KAAK,SAHV,mBAQC,kC,GAbY3C,c,olBCDjB4C,E,sLACW,IAAD,OAEZ,OADAlC,QAAQC,IAAIjB,KAAKR,MAAM2D,OAErB,4BACGnD,KAAKR,MAAM2D,MAAMtB,KAAI,SAACuB,EAAMrB,GAC3B,OAAIqB,EAAKlC,KAAO,EAAK1B,MAAMmC,YAAYT,GAEnC,kBAAC,EAAD,CAAoBN,IAAKmB,EAAOsB,cAAc,UAC5C,kBAACjC,EAAA,EAAD,CAAYY,MAAO,CAAEI,MAAO,SAAWd,QAAQ,QAAQC,UAAU,KAChE6B,EAAKE,KADN,WAOJ,kBAAC,EAAD,CAAoB1C,IAAKmB,EAAOsB,cAAeD,EAAKG,SAAS9D,OAC3D,kBAAC2B,EAAA,EAAD,CAAYY,MAAO,CAAEI,MAAO,SAAWd,QAAQ,QAAQC,UAAU,KAChE6B,EAAKE,a,+BAUhB,OAAItD,KAAKR,MAAM2D,MACNnD,KAAKwD,cAGV,4BACE,kBAACpC,EAAA,EAAD,CAAYY,MAAO,CAAEI,MAAO,SAAWd,QAAQ,QAAQC,UAAU,KAAjE,mB,GAjCejB,aAwCnBmD,E,iLAEF,IAAMC,EAAS,CACbC,GAAI,CACFC,QAAS,OACT3B,WAAY,SACZ4B,UAAW,EACXC,aAAc,EACdC,WAAY,EACZC,cAAe,GAEjBC,IAAK,CACHC,aAAc,MACdC,MAAO,GACPC,OAAQ,GACRC,YAAa,KAGjB,OACE,wBAAIrC,MAAO0B,EAAOC,IAChB,yBACE3B,MAAK,KACA0B,EAAOO,IADP,CAEH9B,gBAC+B,WAA7BnC,KAAKR,MAAM6D,cAA6B,UAAY,cAGzDrD,KAAKR,MAAM8E,c,GA3BahE,aAiClB4C,ICgCAqB,E,YAlGb,WAAY/E,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXkC,YAAa,GACb6C,YAAa,GACb5C,SAAU,GACVkB,kBAAmB,IAErB,EAAK2B,YAAc,EAAKA,YAAY7E,KAAjB,gBACnB,EAAK8E,gBAAkB,EAAKA,gBAAgB9E,KAArB,gBATN,E,+EAajBI,KAAKP,MAAMkC,YACRgD,WAAW,CAAEC,OAAQ5E,KAAKP,MAAM+E,YAAYtD,KAC5C2D,OAAM,SAAAC,GAAK,OAAI9D,QAAQ8D,MAAM,QAASA,Q,kCAG/BxC,GACRtC,KAAKP,MAAMkC,YAAY8C,YAAY,CACjCnC,OACAsC,OAAQ5E,KAAKP,MAAM+E,YAAYtD,O,0CAIf,IAAD,OACC,IAAI6D,IAAQC,YAAY,CAC5CC,gBAAiB,8CACfC,OAAQlF,KAAKR,MAAM2F,gBACnBC,cAAe,IAAIL,IAAQM,cAAc,CACvCC,IAAK,yCAKNC,UACAC,MAAK,SAAA7D,GAEF,OADF,EAAK1B,SAAS,CAAE0B,gBACPA,EAAY8D,gBAAgB,CAC/Bb,OAAQ,uCACRc,aAAc,IACdC,MAAO,CACLC,UAAW,SAAA9D,GACT,EAAK7B,SAAS,CACZ2B,SAAS,GAAD,mBAAM,EAAKnC,MAAMmC,UAAjB,CAA2BE,OAGvC+D,oBAAqB,SAAAzC,GACnB,EAAKnD,SAAS,CACZ6C,kBAAkB,GAAD,mBAAM,EAAKrD,MAAMqD,mBAAjB,CAAoCM,EAAKE,UAG9DwC,oBAAqB,SAAA1C,GACnB,EAAKnD,SAAS,CACZ6C,kBAAmB,EAAKrD,MAAMqD,kBAAkBiD,QAC9C,SAAArG,GAAQ,OAAIA,IAAa0D,EAAKE,WAIpC0C,iBAAkB,kBAAM,EAAKC,eAC7BC,aAAc,kBAAM,EAAKD,qBAI9BT,MAAK,SAAAhB,GACJ,EAAKvE,SAAS,CAAEuE,mBAEnBK,OAAM,SAAAC,GAAK,OAAI9D,QAAQ8D,MAAM,QAASA,Q,+BAI3C,OACE,yBAAKzD,UAAU,aACb,yBAAKA,UAAU,YACb,6CACA,kBAAC,EAAD,CACEM,YAAa3B,KAAKP,MAAMkC,YACxBwB,MAAOnD,KAAKP,MAAM+E,YAAYrB,SAGlC,yBAAK9B,UAAU,cACb,kBAAC,EAAD,CACEO,SAAU5B,KAAKP,MAAMmC,SACrBD,YAAa3B,KAAKP,MAAMkC,cAG1B,kBAAC,EAAD,CAAUmB,kBAAmB9C,KAAKP,MAAMqD,oBACxC,kBAAC,EAAD,CACEnD,SAAUK,KAAKyE,YACf5E,SAAUG,KAAK0E,wB,GA1FFpE,aCiCV6F,E,YArCb,aAAe,IAAD,8BACZ,+CACK1G,MAAQ,CACX0F,gBAAiB,GACjBiB,cAAe,4BAEjB,EAAKC,oBAAsB,EAAKA,oBAAoBzG,KAAzB,gBANf,E,iFASMF,GAAW,IAAD,OAC5B4G,MAAM,8BAA+B,CACnCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEjH,eAEtB8F,MAAK,SAAAoB,GACJ,EAAK3G,SAAS,CACZkF,gBAAiBzF,EACjB0G,cAAe,kBAGlBvB,OAAM,SAAAC,GAAK,OAAI9D,QAAQ8D,MAAM,QAASA,Q,+BAIxC,MAAiC,6BAA7B9E,KAAKP,MAAM2G,cACP,kBAAC,EAAD,CAAczG,SAAUK,KAAKqG,sBAEJ,eAA7BrG,KAAKP,MAAM2G,cAEP,kBAAC,EAAD,CAAYjB,gBAAiBnF,KAAKP,MAAM0F,uBAFhD,M,GA/Ba7E,aCQEuG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.bfea0183.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass UsernameForm extends Component {\n constructor(props) {\n   super(props)\n   this.state = {\n     username: '',\n   }\n   this.onSubmit = this.onSubmit.bind(this);\n   this.onChange = this.onChange.bind(this);\n }\n\n onSubmit(e) {\n   e.preventDefault()\n   this.props.onSubmit(this.state.username);\n };\n\n onChange(e) {\n    this.setState({ username: e.target.value });\n };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h2>What is your username?</h2>\n          <form onSubmit={this.onSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Type your fullName\"\n              onChange={this.onChange}\n            />\n            <input type=\"submit\" />\n          </form>\n        </div>\n      </div>\n    )\n  }\n};\n\n export default UsernameForm;","import React, { Component } from 'react';\nimport searchYouTube from 'youtube-search-api-with-axios';\nimport Typography from '@material-ui/core/Typography';\nimport './index.css';\n\nconst API_KEY = 'AIzaSyCT5YNj0WpEUrt_4K8b3GZ6NoBZTOImXMA';\n\nclass IframeVideo extends Component {\n  constructor() {\n    super()\n    this.state = {\n      videoUri: '',\n      isLoading: true,\n    }\n  }\n\n  componentDidMount(){\n    const { term } = this.props;\n    searchYouTube({key: API_KEY, term: term, q: term, maxResults: 1}, (videos) => {\n        console.log(videos);\n        this.setState({ videoUri: `https://www.youtube.com/embed/${videos[0].id.videoId}`, isLoading: false});\n    });\n    console.log('data', term)\n  }\n\n  render() {\n     if (this.state.isLoading) {\n        return (\n            <Typography className=\"txt\" variant=\"body2\" component=\"p\">\n                Loading video...\n            </Typography>\n        )\n     } else {\n      return <iframe src={this.state.videoUri} title=\"Youtube Videos\" />\n    }\n  }\n};\n\nexport default IframeVideo;","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport IframeVideo from '../IframeVideo'\nimport moment from \"moment\";\nimport './index.css';\n\nclass MessageList extends Component {\n  render() {\n    const { currentUser, messages } = this.props;\n    return (\n      <div\n      className=\"msgListContainer\"\n      >\n        <ul>\n          {messages.map((message, index) => (\n            <div className=\"divElm\" style={{ alignItems: currentUser.id === message.senderId ? 'flex-end':'flex-start' }} key={index}>\n              <div className=\"cardDiv\" style={{ backgroundColor: currentUser.id === message.senderId ? '#e1f5fe':'#fafafa' }}>\n                <Typography className=\"title\" color=\"textSecondary\" gutterBottom>\n                  {index > 0 && ((message.senderId === messages[index-1].senderId) || currentUser.id === message.senderId) ? '':message.senderId}\n                </Typography>\n                { message.text[0] === '/' ?\n                <IframeVideo term={message.text.replace('/', '')} />\n                :\n                <Typography className=\"txt\" variant=\"body2\" component=\"p\">\n                  {message.text}\n                </Typography>\n                }\n                <Typography className=\"txtDate\" variant=\"body2\" component=\"p\">\n                  {moment(message.createdAt).format('LT')}\n                </Typography>\n              </div>\n            </div>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n};\n\nexport default MessageList;","import React, { Component } from 'react';\nimport './index.css';\n\nclass SendMsg extends Component {\n constructor(props) {\n   super(props)\n   this.state = {\n     text: '',\n   }\n   this.onSubmit = this.onSubmit.bind(this)\n   this.onChange = this.onChange.bind(this)\n }\n\n  onSubmit(e) {\n   e.preventDefault()\n   this.props.onSubmit(this.state.text)\n   this.setState({ text: '' })\n }\n\n  onChange(e) {\n   this.setState({ text: e.target.value })\n   if (this.props.onChange) {\n     this.props.onChange()\n   }\n }\n\n  render() {\n   return (\n     <div className=\"sendContainer\">\n        <form onSubmit={this.onSubmit}>\n            <input\n                type=\"text\"\n                placeholder=\"Type a message here then hit ENTER\"\n                multiple={true}\n                onChange={this.onChange}\n                value={this.state.text}\n            />\n        </form>\n     </div>\n   )\n }\n};\n\nexport default SendMsg;","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport './index.css';\n\nclass IsTyping extends Component {\n  render() {\n    if (this.props.usersWhoAreTyping.length > 0) {\n      return (\n        <div className=\"containerTyping\">\n          <Typography className=\"title\" color=\"textSecondary\" gutterBottom>\n            {`${this.props.usersWhoAreTyping\n              .slice(0, 2)\n              .join(' and ')} is typing...`}\n          </Typography>\n        </div>\n      )\n    }\n    return <div />\n  }\n};\n\nexport default IsTyping;","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nclass PeopleList extends Component {\n  renderUsers() {\n    console.log(this.props.users)\n    return (\n      <ul>\n        {this.props.users.map((user, index) => {\n          if (user.id === this.props.currentUser.id) {\n            return (\n              <WhosOnlineListItem key={index} presenceState=\"online\">\n                <Typography style={{ color: 'white' }} variant=\"body2\" component=\"p\">\n                {user.name} (You)\n                </Typography>\n              </WhosOnlineListItem>\n            )\n          }\n          return (\n            <WhosOnlineListItem key={index} presenceState={user.presence.state}>\n              <Typography style={{ color: 'white' }} variant=\"body2\" component=\"p\">\n              {user.name}\n              </Typography>\n            </WhosOnlineListItem>\n          )\n        })}\n      </ul>\n    )\n  }\n\n  render() {\n    if (this.props.users) {\n      return this.renderUsers();\n    } else {\n      return (\n        <ul>\n          <Typography style={{ color: 'white' }} variant=\"body2\" component=\"p\">Loading...</Typography>\n        </ul>\n      )\n    }\n  }\n}\n\nclass WhosOnlineListItem extends Component {\n  render() {\n    const styles = {\n      li: {\n        display: 'flex',\n        alignItems: 'center',\n        marginTop: 5,\n        marginBottom: 5,\n        paddingTop: 2,\n        paddingBottom: 2,\n      },\n      div: {\n        borderRadius: '50%',\n        width: 11,\n        height: 11,\n        marginRight: 10,\n      },\n    }\n    return (\n      <li style={styles.li}>\n        <div\n          style={{\n            ...styles.div,\n            backgroundColor:\n              this.props.presenceState === 'online' ? '#03a9f4' : '#414756',\n          }}\n        />\n        {this.props.children}\n      </li>\n    )\n  }\n}\n\nexport default PeopleList;","import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport './index.css'\nimport MessageList from '../../components/MessageList';\nimport SendMsg from '../../components/SendMsg';\nimport IsTyping from '../../components/IsTyping';\nimport PeopleList from '../../components/PeopleList'\n\n\nclass ChatScreen extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentUser: {},\n      currentRoom: {},\n      messages: [],\n      usersWhoAreTyping: [],\n    }\n    this.sendMessage = this.sendMessage.bind(this);\n    this.sendTypingEvent = this.sendTypingEvent.bind(this)\n  };\n\n  sendTypingEvent() {\n    this.state.currentUser\n      .isTypingIn({ roomId: this.state.currentRoom.id })\n      .catch(error => console.error('error', error));\n  }\n\n  sendMessage(text) {\n      this.state.currentUser.sendMessage({\n        text,\n        roomId: this.state.currentRoom.id,\n      });\n  };\n\n  componentDidMount () {\n    const chatManager = new Chatkit.ChatManager({\n    instanceLocator: 'v1:us1:027b5d6e-2c39-4cc2-b312-c0673f7f31ff',\n      userId: this.props.currentUsername,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: 'http://localhost:3001/authenticate',\n      }),\n  });\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.setState({ currentUser });\n          return currentUser.subscribeToRoom({\n              roomId: \"956d5d68-9a86-4593-b864-8318e6f0a5f6\",\n              messageLimit: 100,\n              hooks: {\n                onMessage: message => {\n                  this.setState({\n                    messages: [...this.state.messages, message],\n                  });\n                },\n                onUserStartedTyping: user => {\n                  this.setState({\n                    usersWhoAreTyping: [...this.state.usersWhoAreTyping, user.name],\n                  })\n                },\n                onUserStoppedTyping: user => {\n                  this.setState({\n                    usersWhoAreTyping: this.state.usersWhoAreTyping.filter(\n                      username => username !== user.name\n                    ),\n                  })\n                },\n                onPresenceChange: () => this.forceUpdate(),\n                onUserJoined: () => this.forceUpdate(),\n              },\n            })\n          })\n          .then(currentRoom => {\n            this.setState({ currentRoom });\n          })\n        .catch(error => console.error('error', error))\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"whoIsDiv\">\n          <h1>Who is Online</h1>\n          <PeopleList\n            currentUser={this.state.currentUser}\n            users={this.state.currentRoom.users}\n          />\n        </div>\n        <div className=\"messageDiv\">\n          <MessageList\n            messages={this.state.messages}\n            currentUser={this.state.currentUser}\n            // style={styles.chatList}\n          />\n          <IsTyping usersWhoAreTyping={this.state.usersWhoAreTyping} />\n          <SendMsg \n            onSubmit={this.sendMessage}\n            onChange={this.sendTypingEvent}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default ChatScreen;","import React, { Component } from 'react';\nimport UsernameForm from './components/UsernameForm';\nimport ChatScreen from './pages/ChatView';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      currentUsername: '',\n      currentScreen: 'WhatIsYourUsernameScreen'\n    }\n    this.onUsernameSubmitted = this.onUsernameSubmitted.bind(this);\n  }\n\n  onUsernameSubmitted(username) {\n    fetch('http://localhost:3001/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username }),\n    })\n      .then(response => {\n        this.setState({\n          currentUsername: username,\n          currentScreen: 'ChatScreen'\n        });\n      })\n      .catch(error => console.error('error', error))\n  };\n\n  render() {\n     if (this.state.currentScreen === 'WhatIsYourUsernameScreen') {\n      return <UsernameForm onSubmit={this.onUsernameSubmitted} />\n    };\n     if (this.state.currentScreen === 'ChatScreen') {\n    //  if (true) {\n      return <ChatScreen currentUsername={this.state.currentUsername} />\n    };\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}